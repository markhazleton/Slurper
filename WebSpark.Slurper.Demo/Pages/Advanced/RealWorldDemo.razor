@page "/advanced/realworld"
@using WebSpark.Slurper
@using System.Dynamic
@using System.Text.Json
@using System.Collections.Generic
@inject HttpClient Http

<PageTitle>Slurper - Real-World Examples</PageTitle>

<div class="container">
    <div class="row mt-4">
        <div class="col-md-12">
            <h1>Real-World Examples</h1>
            <p class="lead">
                Practical use cases and real-world applications of Slurper in everyday development scenarios.
            </p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-12">
            <ul class="nav nav-tabs" id="exampleTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="api-tab" data-bs-toggle="tab" data-bs-target="#api" 
                            type="button" role="tab" aria-controls="api" aria-selected="true">
                        API Integration
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="config-tab" data-bs-toggle="tab" data-bs-target="#config" 
                            type="button" role="tab" aria-controls="config" aria-selected="false">
                        Configuration Files
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="transform-tab" data-bs-toggle="tab" data-bs-target="#transform" 
                            type="button" role="tab" aria-controls="transform" aria-selected="false">
                        Data Transformation
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="scraping-tab" data-bs-toggle="tab" data-bs-target="#scraping" 
                            type="button" role="tab" aria-controls="scraping" aria-selected="false">
                        Web Scraping
                    </button>
                </li>
            </ul>
            
            <div class="tab-content p-3 border border-top-0 rounded-bottom" id="exampleTabsContent">
                <!-- API Integration Example -->
                <div class="tab-pane fade show active" id="api" role="tabpanel" aria-labelledby="api-tab">
                    <h3>API Integration Example</h3>
                    <p>
                        Slurper makes consuming external APIs simple without having to create model classes for each response format.
                        Here's how you might use it in an API client:
                    </p>
                    
                    <div class="card mb-3">
                        <div class="card-header bg-light">
                            <h5>Code Example</h5>
                        </div>
                        <div class="card-body">
                            <pre><code class="language-csharp">public class WeatherApiClient
{
    private readonly HttpClient _httpClient;
    private readonly SlurperFactory _slurperFactory;
    
    public WeatherApiClient(HttpClient httpClient)
    {
        _httpClient = httpClient;
        _slurperFactory = new SlurperFactory();
    }
    
    public async Task&lt;dynamic&gt; GetWeatherForecastAsync(string city)
    {
        // Make the API request
        var response = await _httpClient.GetStringAsync(
            $"https://api.weatherapi.com/v1/forecast.json?q={city}&days=3");
        
        // Extract the JSON data - no models needed!
        var jsonExtractor = _slurperFactory.CreateJsonExtractor();
        var weatherData = jsonExtractor.Extract(response);
        
        // Access the data dynamically
        return new
        {
            City = weatherData.location.name,
            Region = weatherData.location.region,
            Country = weatherData.location.country,
            CurrentTemperature = weatherData.current.temp_c,
            CurrentCondition = weatherData.current.condition.text,
            Forecast = weatherData.forecast.forecastday.Select(day => new
            {
                Date = day.date,
                MaxTemp = day.day.maxtemp_c,
                MinTemp = day.day.mintemp_c,
                Condition = day.day.condition.text
            }).ToList()
        };
    }
}</code></pre>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5>Benefits</h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">No need to create model classes for each API response</li>
                            <li class="list-group-item">Easily handle API response format changes without updating models</li>
                            <li class="list-group-item">Extract only the data you need from complex responses</li>
                            <li class="list-group-item">Work with multiple API versions using the same client code</li>
                        </ul>
                    </div>
                </div>
                
                <!-- Configuration Files Example -->
                <div class="tab-pane fade" id="config" role="tabpanel" aria-labelledby="config-tab">
                    <h3>Configuration Files Example</h3>
                    <p>
                        Slurper is perfect for working with configuration files in different formats without being tied to specific schemas.
                    </p>
                    
                    <div class="card mb-3">
                        <div class="card-header bg-light">
                            <h5>Code Example</h5>
                        </div>
                        <div class="card-body">
                            <pre><code class="language-csharp">public class ConfigurationManager
{
    private readonly SlurperFactory _slurperFactory;
    
    public ConfigurationManager()
    {
        _slurperFactory = new SlurperFactory();
    }
    
    public dynamic LoadConfiguration(string filePath)
    {
        var fileExtension = Path.GetExtension(filePath).ToLowerInvariant();
        var fileContent = File.ReadAllText(filePath);
        
        switch (fileExtension)
        {
            case ".json":
                var jsonExtractor = _slurperFactory.CreateJsonExtractor();
                return jsonExtractor.Extract(fileContent);
                
            case ".xml":
                var xmlExtractor = _slurperFactory.CreateXmlExtractor();
                return xmlExtractor.Extract(fileContent);
                
            // Add support for other formats as needed
                
            default:
                throw new NotSupportedException($"Configuration file format {fileExtension} is not supported.");
        }
    }
    
    // Example usage:
    public void ConfigureApplication()
    {
        var appConfig = LoadConfiguration("appSettings.json");
        var connectionString = appConfig.database.connectionString;
        var logLevel = appConfig.logging.level;
        var apiKeys = appConfig.security.apiKeys;
        
        // Configure services using the dynamic properties
        // No need for strongly-typed configuration classes
    }
}</code></pre>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5>Benefits</h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Support multiple configuration formats with the same code</li>
                            <li class="list-group-item">Handle configuration changes without recompiling</li>
                            <li class="list-group-item">Easily migrate between different configuration formats</li>
                            <li class="list-group-item">Add new configuration properties without updating models</li>
                        </ul>
                    </div>
                </div>
                
                <!-- Data Transformation Example -->
                <div class="tab-pane fade" id="transform" role="tabpanel" aria-labelledby="transform-tab">
                    <h3>Data Transformation Example</h3>
                    <p>
                        Slurper excels at transforming data between formats without requiring intermediate model classes.
                    </p>
                    
                    <div class="card mb-3">
                        <div class="card-header bg-light">
                            <h5>Code Example</h5>
                        </div>
                        <div class="card-body">
                            <pre><code class="language-csharp">public class DataTransformer
{
    private readonly SlurperFactory _slurperFactory;
    private readonly SerializerFactory _serializerFactory;
    
    public DataTransformer()
    {
        _slurperFactory = new SlurperFactory();
        _serializerFactory = new SerializerFactory();
    }
    
    // Convert XML to JSON
    public string XmlToJson(string xmlData, bool indent = true)
    {
        // Extract from XML
        var xmlExtractor = _slurperFactory.CreateXmlExtractor();
        var data = xmlExtractor.Extract(xmlData);
        
        // Serialize back to JSON
        return data.ToJson(indented: indent);
    }
    
    // Transform XML to a different structure
    public string TransformXml(string xmlData, string transformationTemplate)
    {
        // Extract from source XML
        var xmlExtractor = _slurperFactory.CreateXmlExtractor();
        var sourceData = xmlExtractor.Extract(xmlData);
        
        // Extract the transformation template
        var template = xmlExtractor.Extract(transformationTemplate);
        
        // Create transformed structure dynamically
        dynamic transformed = new System.Dynamic.ExpandoObject();
        
        // Apply transformations based on the template
        // This is where Slurper shines - dynamic property access without models
        if (template.mappings != null && template.mappings.mappingList != null)
        {
            foreach (var mapping in template.mappings.mappingList)
            {
                // Get source path and target path from template
                string sourcePath = mapping.source;
                string targetPath = mapping.target;
                
                // Evaluate the source path against the source data
                // Dynamic path navigation without reflection or complex mapping rules
                dynamic value = EvaluatePath(sourceData, sourcePath);
                
                // Set the value in the target structure
                SetValueAtPath(transformed, targetPath, value);
            }
        }
        
        // Serialize the transformed structure to XML or JSON
        return transformed.ToJson(indented: true);
    }
    
    // Helper methods for path-based data access would be implemented here
    private dynamic EvaluatePath(dynamic source, string path) 
    {
        // Implementation would navigate the dynamic object using the path
        // e.g., "customer.orders[0].items.name" would be evaluated
        return null; // Simplified for demo
    }
    
    private void SetValueAtPath(dynamic target, string path, dynamic value)
    {
        // Implementation would set the value at the specified path
        // Creating intermediate objects as needed
    }
}</code></pre>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5>Benefits</h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Convert between data formats without intermediate models</li>
                            <li class="list-group-item">Apply complex transformations with simple path navigation</li>
                            <li class="list-group-item">Create dynamic data structures based on templates</li>
                            <li class="list-group-item">Implement ETL processes with minimal code</li>
                        </ul>
                    </div>
                </div>
                
                <!-- Web Scraping Example -->
                <div class="tab-pane fade" id="scraping" role="tabpanel" aria-labelledby="scraping-tab">
                    <h3>Web Scraping Example</h3>
                    <p>
                        Slurper's HTML extractor makes web scraping straightforward by converting HTML into navigable objects.
                    </p>
                    
                    <div class="card mb-3">
                        <div class="card-header bg-light">
                            <h5>Code Example</h5>
                        </div>
                        <div class="card-body">
                            <pre><code class="language-csharp">public class BlogScraper
{
    private readonly HttpClient _httpClient;
    private readonly SlurperFactory _slurperFactory;
    
    public BlogScraper(HttpClient httpClient)
    {
        _httpClient = httpClient;
        _slurperFactory = new SlurperFactory();
    }
    
    public async Task&lt;List&lt;dynamic&gt;&gt; ScrapeArticlesAsync(string blogUrl)
    {
        // Fetch the HTML content
        var html = await _httpClient.GetStringAsync(blogUrl);
        
        // Extract content using the HTML extractor
        var htmlExtractor = _slurperFactory.CreateHtmlExtractor();
        var page = htmlExtractor.Extract(html);
        
        // Extract articles using dynamic property access
        var articles = new List&lt;dynamic&gt;();
        
        // Navigate the DOM structure dynamically
        // This depends on the actual HTML structure of the blog
        try
        {
            // Example: handle the blog structure we have in our sample
            if (page.html.body.main.section != null)
            {
                var recentPosts = page.html.body.main.section.Where(s => s.id == "recent-posts").FirstOrDefault();
                
                if (recentPosts?.articles_grid?.article_card != null)
                {
                    foreach (var article in recentPosts.articles_grid.article_card)
                    {
                        var articleData = new
                        {
                            Title = article.h3.ToString(),
                            Author = article.p.Where(p => p["class"] == "author").FirstOrDefault()?.ToString().Replace("By ", ""),
                            Date = article.p.Where(p => p["class"] == "date").FirstOrDefault()?.ToString(),
                            Tags = article.tags?.tag?.Select(t => t.ToString()).ToList()
                        };
                        
                        articles.Add(articleData);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scraping articles: {ex.Message}");
        }
        
        return articles;
    }
}</code></pre>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5>Benefits</h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Extract data from websites without specialized HTML parsing libraries</li>
                            <li class="list-group-item">Navigate HTML DOM structure with intuitive property access</li>
                            <li class="list-group-item">Handle website structure changes gracefully</li>
                            <li class="list-group-item">Extract complex nested data structures from web pages</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-dark text-white">
                    <h4>Ready to Use Slurper in Your Project?</h4>
                </div>
                <div class="card-body">
                    <p>
                        Install the WebSpark.Slurper NuGet package to start using these features in your own projects:
                    </p>
                    <pre><code class="language-bash">dotnet add package WebSpark.Slurper</code></pre>
                    <div class="mt-3 text-center">
                        <a href="https://www.nuget.org/packages/WebSpark.Slurper" target="_blank" class="btn btn-primary">
                            <i class="bi bi-box"></i> NuGet Package
                        </a>
                        <a href="https://github.com/MarkHazleton/Slurper" target="_blank" class="btn btn-secondary ms-2">
                            <i class="bi bi-github"></i> View on GitHub
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // No code needed for this demo page
}